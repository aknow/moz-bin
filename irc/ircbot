#!/usr/bin/python

HOST = 'irc.mozilla.org'
PORT = 6697
CHANNEL = '#mozilla-taiwan'

# twisted imports
from twisted.words.protocols import irc
from twisted.internet import reactor, protocol, ssl
from twisted.python import log

# system imports
import time
import sys

# module
import irc_url


class LogBot(irc.IRCClient):

    """A logging IRC bot."""

    nickname = "_aknow_bot"

    def connectionMade(self):
        irc.IRCClient.connectionMade(self)

    def connectionLost(self, reason):
        irc.IRCClient.connectionLost(self, reason)

    def autoResponseForURL(self, channel, msg):
        passs, display = irc_url.get_results(msg)
        if passs:
            for d in display:
                msg = "url => [ %s ]" % (d[0])
                self.msg(channel, msg)
                log.msg(msg)

    # callbacks for events

    def signedOn(self):
        """Called when bot has succesfully signed on to server."""
        self.join(self.factory.channel)

    def joined(self, channel):
        """This will get called when the bot joins the channel."""
        return

    def privmsg(self, user, channel, msg):
        """This will get called when the bot receives a message."""
        user = user.split('!', 1)[0]

        # Check to see if they're sending me a private message
        if channel == self.nickname:
            self.autoResponseForURL(user, msg)
            return

        # Check url in channel msg
        self.autoResponseForURL(channel, msg)

        # If it is a message directed at me
        if msg.startswith(self.nickname + ":"):
            # Redirect the msg.
            self.msg('aknow', msg)
            return

    def action(self, user, channel, msg):
        """This will get called when the bot sees someone do an action."""
        user = user.split('!', 1)[0]

    # irc callbacks

    def irc_NICK(self, prefix, params):
        """Called when an IRC user changes their nickname."""
        old_nick = prefix.split('!')[0]
        new_nick = params[0]

    # For fun, override the method that determines how a nickname is changed on
    # collisions. The default method appends an underscore.
    def alterCollidedNick(self, nickname):
        """
        Generate an altered version of a nickname that caused a collision in an
        effort to create an unused related name for subsequent registration.
        """
        return nickname + '^'


class LogBotFactory(protocol.ClientFactory):

    """A factory for LogBots.

    A new protocol instance will be created each time we connect to the server.
    """

    def __init__(self, channel):
        self.channel = channel

    def buildProtocol(self, addr):
        p = LogBot()
        p.factory = self
        return p

    def clientConnectionLost(self, connector, reason):
        """If we get disconnected, reconnect to server."""
        connector.connect()

    def clientConnectionFailed(self, connector, reason):
        print "connection failed:", reason
        reactor.stop()


def main():
    # initialize logging
    log.startLogging(sys.stdout)

    # create factory protocol and application
    f = LogBotFactory(CHANNEL)

    # connect factory to this host and port
    #reactor.connectTCP("irc.freenode.net", 6667, f)
    reactor.connectSSL(HOST, PORT, f, ssl.ClientContextFactory())

    # run bot
    reactor.run()

if __name__ == '__main__':
    while True:
        main()
